# Command with no args

FSW_CMD

==>
Sequence(
  Commands(
    Command(Stem,Args)
  )
)

# Command with two string args

FSW_CMD "hello" "world"
==>
Sequence(
  Commands(
    Command(Stem,Args(String,String))
  )
)

# Command with mixed args

FSW_CMD "hello" 10
==>
Sequence(Commands(
  Command(Stem,Args(String,Number))
))

# Command with mixed args and comment

FSW_CMD "hello" 10# yay comment
==>
Sequence(Commands(
  Command(Stem,Args(String,Number),LineComment)
))

# Commands with different time tags

A2030-001T12:34:56 FSW_CMD "hello" "world"
R10 FSW_CMD "hello" 10
==>
Sequence(Commands(
  Command(
    TimeTag(TimeAbsolute),
    Stem,
    Args(String,String)
  ),
  Command(
    TimeTag(TimeRelative),
    Stem,
    Args(String,Number)
  )
))

# Command with two sting args

# full line comment
FSW_CMD "TRUE" "FALSE" # end of line
# full line comment
==>
Sequence(Commands(
  LineComment,
  Command(Stem,Args(String,String),LineComment),
  LineComment
))

# Command with enum args (disallowed in linter)

FSW_CMD TRUE FALSE
==>

Sequence(Commands(Command(Stem,Args(Enum,Enum))))

# Command with enum args (disallowed in linter) and comments

# Com
FSW_CMD TRUE FALSE # Com 1
# Com
==>

Sequence(Commands(
  LineComment,
  Command(Stem,Args(Enum,Enum),LineComment),
  LineComment
))

# Locals and commands

# declare my local variables, types are defined in adaptation
@LOCAL L01STRING L02INT
FSW_CMD 1 2
FSW_CMD2
==>

Sequence(
  LineComment,
  LocalDeclaration(Enum,Enum),
  Commands(
    Command(Stem,Args(Number,Number)),
    Command(Stem,Args)
  )
)


# Parameters, locals, and commands

@PARAMETER L01STRING L02INT
@LOCAL L01STRING L02INT
FSW_CMD 1 2
FSW_CMD2
==>

Sequence(
  ParameterDeclaration(Enum,Enum),
  LocalDeclaration(Enum,Enum),
  Commands(
    Command(Stem,Args(Number,Number)),
    Command(Stem,Args)
  )
)

# Parameters, locals, and indented commands

@PARAMETER L01STRING L02INT
@LOCAL L01STRING L02INT
      FSW_CMD 1 2
      FSW_CMD2 "string val"
==>

Sequence(
  ParameterDeclaration(Enum,Enum),
  LocalDeclaration(Enum,Enum),
  Commands(
    Command(Stem,Args(Number,Number)),
    Command(Stem,Args(String))
  )
)

# Bad Input - Invalid stems

C 2_STEM_NAME
STEM$BAR

==>

Sequence(Commands(Command(TimeTag(TimeComplete),⚠(Number),Stem,Args),Command(Stem,⚠),Command(Stem,Args,⚠)))

# Commands with models and metadata

@ID "big test"

@METADATA "foo" "val foo"


CMD_1 1 2 3
@METADATA "foo" "val\" foo2"
@METADATA "bar" "val bar"

CMD_2 "hello, it's me"
@METADATA "bar" "val bar2"
@MODEL "a" "b" "c"
@MODEL "d" "e" "f"
==>

Sequence(
  IdDeclaration(String),
  Metadata(String,String),
  Commands(
    Command(
      Stem,
      Args(Number,Number,Number),
      Metadata(String,String),
      Metadata(String,String)
    ),
    Command(
      Stem,
      Args(String),
      Metadata(String,String),
      Model(String,String,String),
      Model(String,String,String)
    )
  )
)

# Commands with models and metadata, with mixed indentation

@ID "big test"

@METADATA "foo" "val foo"


    CMD_1 1 2 3
@METADATA "foo" "val\" foo2"
@METADATA "bar" "val bar"


        CMD_2 "hello, it's me"
@METADATA "bar" "val bar2"
@MODEL "a" "b" "c"
@MODEL  "d" "e" "f"
==>

Sequence(
  IdDeclaration(String),
  Metadata(String,String),
  Commands(
    Command(
      Stem,
      Args(Number,Number,Number),
      Metadata(String,String),
      Metadata(String,String)
    ),
    Command(
      Stem,
      Args(String),
      Metadata(String,String),
      Model(String,String,String),
      Model(String,String,String)
    )
  )
)
